[{"path":"https://vangberg.github.io/bakepipe/CLAUDE.html","id":null,"dir":"","previous_headings":"","what":"CLAUDE.md","title":"CLAUDE.md","text":"file provides guidance Claude Code (claude.ai/code) working code repository.","code":""},{"path":"https://vangberg.github.io/bakepipe/CLAUDE.html","id":"project-overview","dir":"","previous_headings":"","what":"Project Overview","title":"CLAUDE.md","text":"Bakepipe R library turns script-based workflows reproducible pipelines. ’s designed scientists analysts use R prefer keep workflows scripts, need better management file dependencies. project currently early development phase (described “vaporware” README) contains documentation time.","code":""},{"path":"https://vangberg.github.io/bakepipe/CLAUDE.html","id":"core-concepts","dir":"","previous_headings":"","what":"Core Concepts","title":"CLAUDE.md","text":"file_in(): Function mark input files R scripts file_out(): Function mark output files R scripts run(): Function execute pipeline topological order status(): Function display pipeline structure relationships","code":""},{"path":"https://vangberg.github.io/bakepipe/CLAUDE.html","id":"development-status","dir":"","previous_headings":"","what":"Development Status","title":"CLAUDE.md","text":"repository contains working R package basic functionality implemented. See DEVELOPMENT.md detailed development setup, testing, build instructions.","code":""},{"path":"https://vangberg.github.io/bakepipe/CLAUDE.html","id":"development-workflow","dir":"","previous_headings":"","what":"Development Workflow","title":"CLAUDE.md","text":"implementing new features: 1. WRITE TESTS FIRST DESCRIBE EXPECTED BEHAVIOR 2. Wait user approval test proceeding 3. test accepted, implement actual functionality","code":""},{"path":"https://vangberg.github.io/bakepipe/CLAUDE.html","id":"key-features-to-implement","dir":"","previous_headings":"","what":"Key Features to Implement","title":"CLAUDE.md","text":"Static analysis R scripts detect file_in() file_out() calls Topological sorting determine script execution order Pipeline execution proper error handling Pipeline visualization status reporting","code":""},{"path":"https://vangberg.github.io/bakepipe/CLAUDE.html","id":"testing-principles","dir":"","previous_headings":"","what":"Testing Principles","title":"CLAUDE.md","text":"Avoid mocks tests possible","code":""},{"path":"https://vangberg.github.io/bakepipe/CLAUDE.html","id":"notifications","dir":"","previous_headings":"","what":"Notifications","title":"CLAUDE.md","text":"Claude Code needs user input attention, use terminal-notifier:","code":"terminal-notifier -message \"Claude Code needs your input\" -title \"Claude Code\" -sound \"default\""},{"path":[]},{"path":[]},{"path":"https://vangberg.github.io/bakepipe/DEVELOPMENT.html","id":"prerequisites","dir":"","previous_headings":"Setting up for Development","what":"Prerequisites","title":"Development Guide","text":"Install required R packages:","code":"install.packages(c(\"devtools\", \"testthat\", \"roxygen2\"))"},{"path":"https://vangberg.github.io/bakepipe/DEVELOPMENT.html","id":"installing-the-package","dir":"","previous_headings":"Setting up for Development","what":"Installing the Package","title":"Development Guide","text":"Build install package locally: using devtools:","code":"R CMD build . R CMD INSTALL bakepipe_0.0.0.9000.tar.gz devtools::install()"},{"path":[]},{"path":"https://vangberg.github.io/bakepipe/DEVELOPMENT.html","id":"using-devtools-recommended","dir":"","previous_headings":"Running Tests","what":"Using devtools (recommended)","title":"Development Guide","text":"","code":"devtools::test()"},{"path":"https://vangberg.github.io/bakepipe/DEVELOPMENT.html","id":"using-r-cmd-check","dir":"","previous_headings":"Running Tests","what":"Using R CMD check","title":"Development Guide","text":"","code":"R CMD check --no-manual --no-vignettes ."},{"path":"https://vangberg.github.io/bakepipe/DEVELOPMENT.html","id":"manual-testing","dir":"","previous_headings":"Running Tests","what":"Manual testing","title":"Development Guide","text":"Load package test functions:","code":"library(bakepipe)  # Test file_in file_in(\"test.csv\")  # Should return \"test.csv\"  # Test file_out   file_out(\"output.csv\")  # Should return \"output.csv\""},{"path":"https://vangberg.github.io/bakepipe/DEVELOPMENT.html","id":"package-structure","dir":"","previous_headings":"","what":"Package Structure","title":"Development Guide","text":"file_in.R - Mark input files file_out.R - Mark output files run.R - Execute pipeline (yet implemented) status.R - Show pipeline status (yet implemented) tests/testthat/ - Unit tests man/ - Documentation (generated roxygen2) DESCRIPTION - Package metadata NAMESPACE - Package exports (generated roxygen2)","code":""},{"path":"https://vangberg.github.io/bakepipe/DEVELOPMENT.html","id":"sample-project","dir":"","previous_headings":"","what":"Sample Project","title":"Development Guide","text":"complete sample project available sample-project/ demonstrate bakepipe functionality testing development.","code":""},{"path":"https://vangberg.github.io/bakepipe/DEVELOPMENT.html","id":"sample-project-structure","dir":"","previous_headings":"Sample Project","what":"Sample Project Structure","title":"Development Guide","text":"","code":"sample-project/ ├── .Rprofile                 # Automatic bakepipe setup for R sessions ├── _bakepipe.R               # Pipeline configuration file ├── raw_data.csv              # Sample input dataset ├── 01_clean_data.R           # Data cleaning script ├── 02_analyze_data.R         # Data analysis script └── 03_generate_report.R      # Report generation script"},{"path":[]},{"path":"https://vangberg.github.io/bakepipe/DEVELOPMENT.html","id":"option-1-manual-setup","dir":"","previous_headings":"Sample Project > Using the Sample Project","what":"Option 1: Manual setup","title":"Development Guide","text":"","code":"devtools::load_all() setwd(\"sample-project\") status()  # View pipeline structure run()     # Execute pipeline"},{"path":"https://vangberg.github.io/bakepipe/DEVELOPMENT.html","id":"option-2-automatic-setup","dir":"","previous_headings":"Sample Project > Using the Sample Project","what":"Option 2: Automatic setup","title":"Development Guide","text":"","code":"cd sample-project R  # The .Rprofile automatically loads bakepipe"},{"path":"https://vangberg.github.io/bakepipe/DEVELOPMENT.html","id":"pipeline-root-marker","dir":"","previous_headings":"Sample Project","what":"Pipeline Root Marker","title":"Development Guide","text":"_bakepipe.R file marks root directory bakepipe project: file helps bakepipe functions identify project root directory.","code":"# Bakepipe root marker # This file marks the root directory of a bakepipe project"},{"path":"https://vangberg.github.io/bakepipe/DEVELOPMENT.html","id":"expected-output","dir":"","previous_headings":"Sample Project","what":"Expected Output","title":"Development Guide","text":"running pipeline, following files generated: - cleaned_data.csv - Cleaned dataset age groups - analysis_results.rds - R data structure analysis results - report.txt - Human-readable summary report","code":""},{"path":"https://vangberg.github.io/bakepipe/DEVELOPMENT.html","id":"generating-documentation","dir":"","previous_headings":"","what":"Generating Documentation","title":"Development Guide","text":"updates NAMESPACE file generates man pages roxygen2 comments.","code":"devtools::document()"},{"path":"https://vangberg.github.io/bakepipe/DEVELOPMENT.html","id":"pre-commit-hook-for-automatic-documentation","dir":"","previous_headings":"Generating Documentation","what":"Pre-commit Hook for Automatic Documentation","title":"Development Guide","text":"pre-commit hook available automatically generate documentation commit. install : hook : 1. Run devtools::document() update documentation 2. Automatically stage updated man/ files NAMESPACE 3. Ensure documentation stays sync code changes hook prevent commits : - R available PATH - devtools package installed - Documentation generation fails bypass hook exceptional cases:","code":"cp hooks/pre-commit .git/hooks/pre-commit chmod +x .git/hooks/pre-commit git commit --no-verify"},{"path":"https://vangberg.github.io/bakepipe/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Harry Vangberg. Author, maintainer.","code":""},{"path":"https://vangberg.github.io/bakepipe/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Vangberg H (2025). bakepipe: Turn Script-Based Workflows Reproducible Pipelines. R package version 0.0.0.9000, https://vangberg.github.io/bakepipe/.","code":"@Manual{,   title = {bakepipe: Turn Script-Based Workflows into Reproducible Pipelines},   author = {Harry Vangberg},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://vangberg.github.io/bakepipe/}, }"},{"path":"https://vangberg.github.io/bakepipe/index.html","id":"bakepipe","dir":"","previous_headings":"","what":"Turn Script-Based Workflows into Reproducible Pipelines","title":"Turn Script-Based Workflows into Reproducible Pipelines","text":"Bakepipe R library turns script-based workflows reproducible pipelines. ’s designed scientists analysts use R prefer keep workflows scripts, need better management file dependencies.","code":""},{"path":"https://vangberg.github.io/bakepipe/index.html","id":"table-of-contents","dir":"","previous_headings":"","what":"Table of Contents","title":"Turn Script-Based Workflows into Reproducible Pipelines","text":"Motivation Installation First Pipeline Example Mark input Mark output Run pipeline Show pipeline status script execution order determined? outputs cached? Bakepipe compare pipeline tools?","code":""},{"path":"https://vangberg.github.io/bakepipe/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Turn Script-Based Workflows into Reproducible Pipelines","text":"analyzing data R, often start everything single script. analysis broadens, might split multiple scripts. One script might read data, clean , maybe merge multiple datasets. Statistics run another script, plots generated third. script writes data used another script. fine, eventually gets hand. need manually run scripts right order, manually tracking file dependencies. manual tracking can lead errors, forgotten steps, headaches, especially sharing analysis colleagues. Bakepipe helps manage automatically determining execution order scripts based file inputs outputs. lets maintain script-based workflow, avoiding need refactor functions learn complex new syntaxes.","code":""},{"path":[]},{"path":"https://vangberg.github.io/bakepipe/index.html","id":"installation","dir":"","previous_headings":"Quick Start","what":"Installation","title":"Turn Script-Based Workflows into Reproducible Pipelines","text":"Bakepipe currently vaporware installed. Check back soon!","code":""},{"path":"https://vangberg.github.io/bakepipe/index.html","id":"your-first-pipeline","dir":"","previous_headings":"Quick Start","what":"Your First Pipeline","title":"Turn Script-Based Workflows into Reproducible Pipelines","text":"Create project root marker: Create empty _bakepipe.R file project root directory. Mark file relationships: R scripts, use file_in() file_out() specify input output files. Run: R console RStudio, simply call bakepipe::run(). Bakepipe detect file relationships execute scripts correct order.","code":""},{"path":"https://vangberg.github.io/bakepipe/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Turn Script-Based Workflows into Reproducible Pipelines","text":"example, following files: workflow looks like : scripts look like: file_in file_out used mark input output script. return path file, can used directly reading writing. don’t actually read write files – just mark file relationships Bakepipe can figure needs run . works seamlessly R data type file format (e.g., .csv, .rds, .fst). execute pipeline: execute scripts right order every time ’s called, tell files created.","code":"graph LR     data[(sales.csv)] -->|read by| analysis[analysis.R]     analysis -->|writes| results[(monthly_sales.csv)]     results -->|read by| plots[plots.R]     plots -->|writes| plot{{monthly_trend.png}} # analysis.R library(bakepipe) library(dplyr)  sales <- read.csv(file_in(\"sales.csv\")) # Input file monthly <- sales %>%    group_by(month, category) %>%    summarize(revenue = sum(revenue)) write.csv(monthly, file_out(\"monthly_sales.csv\")) # Output file # plots.R library(bakepipe) library(ggplot2)  monthly <- read.csv(file_in(\"monthly_sales.csv\")) # Input file ggplot(monthly, aes(month, revenue, color = category)) +    geom_line() +   ggsave(file_out(\"monthly_trend.png\")) # Output file bakepipe::run()"},{"path":[]},{"path":"https://vangberg.github.io/bakepipe/index.html","id":"mark-input","dir":"","previous_headings":"API","what":"Mark input","title":"Turn Script-Based Workflows into Reproducible Pipelines","text":"mark file input, use bakepipe::file_in(\"path//file\"). file_in(path) returns path, can used directly reading file:","code":"data <- read.csv(bakepipe::file_in(\"data.csv\"))"},{"path":"https://vangberg.github.io/bakepipe/index.html","id":"mark-output","dir":"","previous_headings":"API","what":"Mark output","title":"Turn Script-Based Workflows into Reproducible Pipelines","text":"mark file output, use bakepipe::file_out(\"path//file\"). file_out(path) returns path, can used directly writing file:","code":"write.csv(data, bakepipe::file_out(\"data.csv\"))"},{"path":"https://vangberg.github.io/bakepipe/index.html","id":"run-pipeline","dir":"","previous_headings":"API","what":"Run pipeline","title":"Turn Script-Based Workflows into Reproducible Pipelines","text":"run pipeline, use bakepipe::run(). execute scripts pipeline graph determined topological order, return list files created updated. script fails, Bakepipe stops execution provides R’s standard error messages, allowing easy debugging.","code":"bakepipe::run()"},{"path":"https://vangberg.github.io/bakepipe/index.html","id":"show-pipeline-status","dir":"","previous_headings":"API","what":"Show pipeline status","title":"Turn Script-Based Workflows into Reproducible Pipelines","text":"show pipeline, use bakepipe::status(). display textual representation input/output relationships files console, helping visualize workflow.","code":"bakepipe::status()"},{"path":[]},{"path":"https://vangberg.github.io/bakepipe/index.html","id":"how-is-script-execution-order-determined","dir":"","previous_headings":"Frequently asked questions","what":"How is script execution order determined?","title":"Turn Script-Based Workflows into Reproducible Pipelines","text":"Bakepipe determines correct execution order static analysis R scripts, looking file_in file_out calls. parses scripts without executing build execution graph, uses determine proper sequence. static analysis means don’t need refactor scripts functions drastically change script structure beyond adding file_in() file_out() calls.","code":""},{"path":"https://vangberg.github.io/bakepipe/index.html","id":"are-outputs-cached","dir":"","previous_headings":"Frequently asked questions","what":"Are outputs cached?","title":"Turn Script-Based Workflows into Reproducible Pipelines","text":"Currently, Bakepipe perform caching checks determine script needs re-run. bakepipe::run() called, scripts pipeline graph executed determined topological order every time. ensures reproducibility always running full analysis, means computational steps skipped inputs haven’t changed. Caching conditional execution based file checks planned features future releases.","code":""},{"path":"https://vangberg.github.io/bakepipe/index.html","id":"how-does-bakepipe-compare-to-other-pipeline-tools","dir":"","previous_headings":"Frequently asked questions","what":"How does Bakepipe compare to other pipeline tools?","title":"Turn Script-Based Workflows into Reproducible Pipelines","text":"want preface comparison saying Bakepipe much limited scope pipeline tools. ’s replacement tools like Snakemake Nextflow, rather tool simple workflows don’t need complexity tools. Yet, want highlight features make Bakepipe unique.","code":""},{"path":"https://vangberg.github.io/bakepipe/index.html","id":"snakemake","dir":"","previous_headings":"Frequently asked questions > How does Bakepipe compare to other pipeline tools?","what":"Snakemake","title":"Turn Script-Based Workflows into Reproducible Pipelines","text":"Snakemake, define workflow walkthrough follows: run pipeline, use following command: Compared Bakepipe, think adds friction. need double bookkeeping, manually keeping Snakefile scripts sync.","code":"rule all:      input: \"plot1.png\", \"plot2.png\"  rule analysis:     input: \"data.csv\"     output: \"analysis.csv\"     shell: \"Rscript analysis.R\"  rule plots:     input: \"analysis.csv\"     output: \"plot1.png\", \"plot2.png\"     shell: \"Rscript plots.R\" snakemake"},{"path":"https://vangberg.github.io/bakepipe/index.html","id":"targets","dir":"","previous_headings":"Frequently asked questions > How does Bakepipe compare to other pipeline tools?","what":"targets","title":"Turn Script-Based Workflows into Reproducible Pipelines","text":"implement workflow targets, need refactor scripts functions, use tar_target function define targets. words, use targets, need abandon script-based workflow start writing functions. really big change; worst case just wrap script function. process, lose advantages script-based workflow, namely iterative interactive development R users often rely .","code":"# functions.R  get_data <- function(file) {     read.csv(file) }  analyze <- function(data) {     table(data) }  plot1 <- function(data) {     plot <- ggplot(data, aes(x = variable, y = value)) + geom_point()     ggsave(\"plot1.png\", plot) }  plot2 <- function(data) {     ggplot(data, aes(x = variable, y = value)) + geom_point()     ggsave(\"plot2.png\") } # _targets.R  library(targets)  tar_source()  list(     tar_target(file, \"data.csv\", format = \"file\"),     tar_target(data, get_data(file)),     tar_target(analysis, analyze(data)),     tar_target(plot1, plot1(analysis)),     tar_target(plot2, plot2(analysis)), )"},{"path":"https://vangberg.github.io/bakepipe/reference/build_script_edges.html","id":null,"dir":"Reference","previous_headings":"","what":"Build edges between scripts through file dependencies — build_script_edges","title":"Build edges between scripts through file dependencies — build_script_edges","text":"Creates edges scripts connected one produces file another consumes.","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/build_script_edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build edges between scripts through file dependencies — build_script_edges","text":"","code":"build_script_edges(parse_data)"},{"path":"https://vangberg.github.io/bakepipe/reference/build_script_edges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build edges between scripts through file dependencies — build_script_edges","text":"parse_data Named list parse() function","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/build_script_edges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build edges between scripts through file dependencies — build_script_edges","text":"Data frame '', '', 'file' columns","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/clean.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove all artifacts generated by scripts — clean","title":"Remove all artifacts generated by scripts — clean","text":"Removes output files generated scripts pipeline, including intermediate files. provides complete clean generated artifacts. pipeline can regenerated running run() .","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/clean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove all artifacts generated by scripts — clean","text":"","code":"clean()"},{"path":"https://vangberg.github.io/bakepipe/reference/clean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove all artifacts generated by scripts — clean","text":"Character vector file paths actually removed","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/clean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove all artifacts generated by scripts — clean","text":"","code":"if (FALSE) { # \\dontrun{ # Remove all generated files removed_files <- clean() } # }"},{"path":"https://vangberg.github.io/bakepipe/reference/detect_cycles.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect cycles in the dependency graph using DFS — detect_cycles","title":"Detect cycles in the dependency graph using DFS — detect_cycles","text":"Detect cycles dependency graph using DFS","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/detect_cycles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect cycles in the dependency graph using DFS — detect_cycles","text":"","code":"detect_cycles(graph_obj)"},{"path":"https://vangberg.github.io/bakepipe/reference/detect_cycles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect cycles in the dependency graph using DFS — detect_cycles","text":"graph_obj Graph object graph() function","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/display_artifacts_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Display the artifacts table — display_artifacts_table","title":"Display the artifacts table — display_artifacts_table","text":"Display artifacts table","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/display_artifacts_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display the artifacts table — display_artifacts_table","text":"","code":"display_artifacts_table(pipeline_data)"},{"path":"https://vangberg.github.io/bakepipe/reference/display_artifacts_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display the artifacts table — display_artifacts_table","text":"pipeline_data Parsed pipeline data","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/display_scripts_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Display the scripts table — display_scripts_table","title":"Display the scripts table — display_scripts_table","text":"Display scripts table","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/display_scripts_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display the scripts table — display_scripts_table","text":"","code":"display_scripts_table(pipeline_data)"},{"path":"https://vangberg.github.io/bakepipe/reference/display_scripts_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display the scripts table — display_scripts_table","text":"pipeline_data Parsed pipeline data","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/extract_file_calls.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract file_in or file_out calls from an expression — extract_file_calls","title":"Extract file_in or file_out calls from an expression — extract_file_calls","text":"Extract file_in file_out calls expression","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/extract_file_calls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract file_in or file_out calls from an expression — extract_file_calls","text":"","code":"extract_file_calls(expr, func_name)"},{"path":"https://vangberg.github.io/bakepipe/reference/extract_file_calls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract file_in or file_out calls from an expression — extract_file_calls","text":"expr Parsed R expression func_name Either \"file_in\" \"file_out\"","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/extract_file_calls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract file_in or file_out calls from an expression — extract_file_calls","text":"Character vector file paths found","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/file_in.html","id":null,"dir":"Reference","previous_headings":"","what":"Mark a file as input to the script — file_in","title":"Mark a file as input to the script — file_in","text":"Mark file input script. function simply returns path used static analysis determine script dependencies. can used directly reading files.","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/file_in.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mark a file as input to the script — file_in","text":"","code":"file_in(path)"},{"path":"https://vangberg.github.io/bakepipe/reference/file_in.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mark a file as input to the script — file_in","text":"path Character string specifying path input file","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/file_in.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mark a file as input to the script — file_in","text":"file path (unchanged)","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/file_in.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mark a file as input to the script — file_in","text":"","code":"if (FALSE) { # \\dontrun{ # Mark a file as input and use it directly when reading data <- read.csv(file_in(\"data.csv\")) } # }"},{"path":"https://vangberg.github.io/bakepipe/reference/file_out.html","id":null,"dir":"Reference","previous_headings":"","what":"Mark a file as output from the script — file_out","title":"Mark a file as output from the script — file_out","text":"Mark file output script. function simply returns path used static analysis determine script dependencies. can used directly writing files.","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/file_out.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mark a file as output from the script — file_out","text":"","code":"file_out(path)"},{"path":"https://vangberg.github.io/bakepipe/reference/file_out.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mark a file as output from the script — file_out","text":"path Character string specifying path output file","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/file_out.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mark a file as output from the script — file_out","text":"file path (unchanged)","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/file_out.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mark a file as output from the script — file_out","text":"","code":"if (FALSE) { # \\dontrun{ # Mark a file as output and use it directly when writing write.csv(data, file_out(\"output.csv\")) } # }"},{"path":"https://vangberg.github.io/bakepipe/reference/find_descendants.html","id":null,"dir":"Reference","previous_headings":"","what":"Find all descendants of a script in the dependency graph — find_descendants","title":"Find all descendants of a script in the dependency graph — find_descendants","text":"Returns scripts depend given script following directed edges. Useful marking scripts stale upstream dependency changes.","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/find_descendants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find all descendants of a script in the dependency graph — find_descendants","text":"","code":"find_descendants(graph_obj, node)"},{"path":"https://vangberg.github.io/bakepipe/reference/find_descendants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find all descendants of a script in the dependency graph — find_descendants","text":"graph_obj Graph object graph() function node Starting script find descendants ","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/find_descendants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find all descendants of a script in the dependency graph — find_descendants","text":"Character vector descendant script names","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/find_descendants.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find all descendants of a script in the dependency graph — find_descendants","text":"","code":"if (FALSE) { # \\dontrun{ parsed <- parse() graph_obj <- graph(parsed) stale_scripts <- find_descendants(graph_obj, \"data_cleaning.R\") } # }"},{"path":"https://vangberg.github.io/bakepipe/reference/graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Create dependency graph from parsed script data — graph","title":"Create dependency graph from parsed script data — graph","text":"Builds Directed Acyclic Graph (DAG) scripts nodes files edges. edge represents file dependency two scripts.","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create dependency graph from parsed script data — graph","text":"","code":"graph(parse_data)"},{"path":"https://vangberg.github.io/bakepipe/reference/graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create dependency graph from parsed script data — graph","text":"parse_data Named list parse() function, element represents script 'inputs' 'outputs' character vectors.","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create dependency graph from parsed script data — graph","text":"List containing: nodes: Character vector script names edges: Data frame '', '', 'file' columns","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create dependency graph from parsed script data — graph","text":"","code":"if (FALSE) { # \\dontrun{ # Parse scripts and create dependency graph parsed <- parse() graph_obj <- graph(parsed) } # }"},{"path":"https://vangberg.github.io/bakepipe/reference/parse.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse R scripts to extract file dependencies — parse","title":"Parse R scripts to extract file dependencies — parse","text":"Finds R scripts project parses detect file_in() file_out() calls. string literals supported arguments functions.","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/parse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse R scripts to extract file dependencies — parse","text":"","code":"parse()"},{"path":"https://vangberg.github.io/bakepipe/reference/parse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse R scripts to extract file dependencies — parse","text":"Named list element represents script. Names script paths relative project root. element contains 'inputs' 'outputs' character vectors.","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/parse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse R scripts to extract file dependencies — parse","text":"","code":"if (FALSE) { # \\dontrun{ # Parse all scripts in the project dependencies <- parse() } # }"},{"path":"https://vangberg.github.io/bakepipe/reference/parse_script.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a single R script for file dependencies — parse_script","title":"Parse a single R script for file dependencies — parse_script","text":"Parse single R script file dependencies","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/parse_script.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a single R script for file dependencies — parse_script","text":"","code":"parse_script(script_path)"},{"path":"https://vangberg.github.io/bakepipe/reference/parse_script.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a single R script for file dependencies — parse_script","text":"script_path Absolute path R script","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/parse_script.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a single R script for file dependencies — parse_script","text":"List 'inputs' 'outputs' character vectors","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/root.html","id":null,"dir":"Reference","previous_headings":"","what":"Find project root directory — root","title":"Find project root directory — root","text":"Find project root locating nearest _bakepipe.R file, searching upward current working directory.","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/root.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find project root directory — root","text":"","code":"root()"},{"path":"https://vangberg.github.io/bakepipe/reference/root.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find project root directory — root","text":"Character string absolute path project root","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/root.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find project root directory — root","text":"","code":"if (FALSE) { # \\dontrun{ # Get the project root directory project_root <- root() } # }"},{"path":"https://vangberg.github.io/bakepipe/reference/run.html","id":null,"dir":"Reference","previous_headings":"","what":"Run pipeline — run","title":"Run pipeline — run","text":"Execute scripts pipeline graph topological order","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run pipeline — run","text":"","code":"run()"},{"path":"https://vangberg.github.io/bakepipe/reference/run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run pipeline — run","text":"Character vector files created updated","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/scripts.html","id":null,"dir":"Reference","previous_headings":"","what":"Find all R scripts in project — scripts","title":"Find all R scripts in project — scripts","text":"Returns vector paths .R scripts project root. project root determined bakepipe::root().","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/scripts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find all R scripts in project — scripts","text":"","code":"scripts()"},{"path":"https://vangberg.github.io/bakepipe/reference/scripts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find all R scripts in project — scripts","text":"Character vector absolute paths .R files","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/scripts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find all R scripts in project — scripts","text":"","code":"if (FALSE) { # \\dontrun{ # Get all R scripts in the project all_scripts <- scripts() } # }"},{"path":"https://vangberg.github.io/bakepipe/reference/status.html","id":null,"dir":"Reference","previous_headings":"","what":"Show pipeline status — status","title":"Show pipeline status — status","text":"Display textual representation input/output relationships files artifacts console","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show pipeline status — status","text":"","code":"status()"},{"path":"https://vangberg.github.io/bakepipe/reference/topological_sort.html","id":null,"dir":"Reference","previous_headings":"","what":"Topological sort of the dependency graph — topological_sort","title":"Topological sort of the dependency graph — topological_sort","text":"Returns scripts topological order using Kahn's algorithm. Scripts appear order dependencies come script.","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/topological_sort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Topological sort of the dependency graph — topological_sort","text":"","code":"topological_sort(graph_obj)"},{"path":"https://vangberg.github.io/bakepipe/reference/topological_sort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Topological sort of the dependency graph — topological_sort","text":"graph_obj Graph object graph() function","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/topological_sort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Topological sort of the dependency graph — topological_sort","text":"Character vector script names topological order","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/topological_sort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Topological sort of the dependency graph — topological_sort","text":"","code":"if (FALSE) { # \\dontrun{ parsed <- parse() graph_obj <- graph(parsed) execution_order <- topological_sort(graph_obj) } # }"},{"path":"https://vangberg.github.io/bakepipe/reference/validate_single_producer.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate that each artifact has at most one producer — validate_single_producer","title":"Validate that each artifact has at most one producer — validate_single_producer","text":"Validate artifact one producer","code":""},{"path":"https://vangberg.github.io/bakepipe/reference/validate_single_producer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate that each artifact has at most one producer — validate_single_producer","text":"","code":"validate_single_producer(parse_data)"},{"path":"https://vangberg.github.io/bakepipe/reference/validate_single_producer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate that each artifact has at most one producer — validate_single_producer","text":"parse_data Named list parse() function","code":""}]
